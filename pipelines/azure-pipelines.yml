trigger:
  branches:
    include:
      - main

variables:
  ACR_NAME: '$(ACR_NAME)'       # e.g. acrgitopsdemo12345
  ACR_LOGIN_SERVER: '$(ACR_LOGIN_SERVER)'  # e.g. acrgitopsdemo12345.azurecr.io
  IMAGE_NAME: 'sample-app'
  IMAGE_TAG: 'v$(Build.BuildId)'
  TF_VAR_acr_name: '$(ACR_NAME)'
  TF_IN_AUTOMATION: 'true'
  RG_NAME: '$(RG_NAME)'
  AKS_NAME: '$(AKS_NAME)'

stages:
- stage: Terraform
  displayName: "Provision Infra (Terraform)"
  jobs:
  - job: tf
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Terraform Init/Plan/Apply'
      inputs:
        azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -e
          sudo apt-get update && sudo apt-get install -y unzip
          curl -fsSL https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip -o tf.zip
          unzip tf.zip && sudo mv terraform /usr/local/bin/ && terraform -version

          cd terraform
          terraform init
          terraform plan -out tfplan
          terraform apply -auto-approve tfplan

- stage: Build
  displayName: "Build & Push Image"
  dependsOn: Terraform
  jobs:
  - job: docker
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'ACR Login'
      inputs:
        azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az acr login --name $(ACR_NAME)
    - script: |
        docker build -t $(ACR_LOGIN_SERVER)/$(IMAGE_NAME):$(IMAGE_TAG) .
        docker push $(ACR_LOGIN_SERVER)/$(IMAGE_NAME):$(IMAGE_TAG)
      displayName: "Docker Build & Push"
    - script: |
        sed -i "s|repository: .*|repository: $(ACR_LOGIN_SERVER)/$(IMAGE_NAME)|" helm/sample-app/values.yaml
        sed -i "s|tag: ".*"|tag: "$(IMAGE_TAG)"|" helm/sample-app/values.yaml
      displayName: "Update Helm values with new image tag"
    - script: |
        git config user.email "devops-bot@example.com"
        git config user.name "devops-bot"
        git add helm/sample-app/values.yaml
        git commit -m "Update image to $(IMAGE_TAG)"
        # Ensure that the checkout step uses a token with push rights or set remote with a PAT.
        git push origin HEAD:main
      displayName: "Commit values.yaml (GitOps)"
      env:
        GIT_ASKPASS: "echo"
        GITHUB_TOKEN: "$(GITHUB_TOKEN)"

- stage: Deploy
  displayName: "Bootstrap ArgoCD (first time only)"
  dependsOn: Build
  condition: and(succeeded(), eq(variables['BOOTSTRAP_ARGOCD'], 'true'))
  jobs:
  - job: argocd
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Install kubectl & connect to AKS'
      inputs:
        azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -e
          az aks get-credentials --resource-group $(RG_NAME) --name $(AKS_NAME) --overwrite-existing
          kubectl version --client=true
    - script: |
        kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        kubectl apply -f manifests/argocd/application.yaml
      displayName: "Install ArgoCD & Application"